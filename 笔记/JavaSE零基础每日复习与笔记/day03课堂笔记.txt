day03课堂笔记

1、Java语言的特性

	1.1、简单性
		在Java语言当中真正操作内存的是：JVM（Java虚拟机）
		所有的java程序都是运行在Java虚拟机当中的。
		而Java虚拟机执行过程中再去操作内存。
		对于C或者C++来说程序员都是可以直接通过指针操作内存的。
		C或者C++更灵活，可以直接程序员操作内存，但是要求程序员技术精湛。
		C语言或者C++更有驾驭感。
		Java语言屏蔽了指针概念，程序员不能直接操作指针，或者说程序员
		不能直接操作内存。这种方式有优点也有缺点：
			优点：不容易导致内存泄漏。（简单了。）
			缺点：效率问题，包括驾驭感比较差。
		
		飞机航行：
			如果是C语言表示程序员是飞机驾驶员。
			如果是Java语言表示程序员是飞机上的乘客。
		
		Java语言底层是C++，所以JVM是用C++语言写好的一个虚拟的电脑。
		JVM在哪里？告诉大家，安装了JDK之后，JVM就代表安装好了。

		内存是什么？
			对于计算机来说：最主要的几个部件是什么？
				CPU：
					中央处理器，相当于人类的大脑，负责发送并执行指令。
					是整个计算机的指挥官。
					CPU是负责计算的，负责运算的。
					10 + 20 = 30
					CPU负责将30这个结果计算出来。
					但是在计算过程中有三个数据需要临时找个空间存储一下：
						这三个数据分别是：10 20 30

				内存：
					程序运行过程当中的临时数据存储空间。
					断电之后或者关机之后内存中的数据就消失了。

				硬盘：
					持久化设备，硬盘上的数据不会因断电而丢失。

				主板：
					相当于人类的躯干，是一个载体：
						CPU、内存条、硬盘等主要的部件都是放在主板上的，
						主板上有很多线，将以上的部件链接起来。
				.....

	1.2、java是堪称完全面向对象的。
		面向对象更容易让人理解，人类通常是以对象的方式认知世界的。
		采用面向对象的方式可以让复杂问题简单化。
	
	1.3、健壮性
		主要是因为Java中有一种机制：
			自动垃圾回收机制（GC机制）。
		java语言是健壮的，相对于C语言来说，C语言没有Java健壮。
		Java不容易导致内存的泄漏。
		C++或者C语言使用不当时很容易导致内存泄漏。

		JVM负责调度GC机制。程序员不需要干涉。

		以上讲解中又描述了这几个术语：
			JVM（C++语言写的一个虚拟的计算机）、GC（垃圾回收机制）
	
	1.4、java完全/完美支持多线程并发。

	1.5、可移植性/跨平台
		java语言只要编写一次，可以做到到处运行。
		例如：java程序编写完之后，可以运行在windows操作系统上，
		不需要做任何改动可以直接运行在Linux操作系统上，同样也
		可以运行到MaC OS上面。

		一次编写，到处运行。（平台改变了，程序不需要改。）

		JVM这种机制实现了跨平台，那么这种机制优点和缺点分别是什么？
			优点：一次编写到处运行，可以跨平台。
			缺点：麻烦。对于运行java程序来说必须先有一个JVM。
			就像你要想在网页上看视频，你必须先安装一个flash是一样的。
		
		Java语言可以编写病毒吗？
			可以，没问题。但是很难让用户中毒。
			中毒的一般都是java程序员。所以很少有人编写java的病毒脚本。

2、JDK、JRE、JVM三者之间的关系？
	JDK:Java开发工具箱
	JRE:java运行环境
	JVM:java虚拟机

	JDK包括JRE，JRE包括JVM。

	JVM是不能独立安装的。
	JRE和JDK都是可以独立安装的。
	有单独的JDK安装包。
	也有单独的JRE安装包。
	没有单独的JVM安装包。

	安装JDK的时候：JRE就自动安装了，同时JRE内部的JVM也就自动安装了。
	安装JRE的时候：JVM也就自动安装了。

	问题：
		假设你在软件公司开发了一个新的软件，现在要去客户那边给客户把
		项目部署一下，把项目跑起来，你需要安装JDK吗？
			只需要安装JRE就行了。
			JRE体积很小，安装非常便捷快速。
	
	问题：
		为什么安装JDK的时候会自带一个JRE？
			因为java程序员开发完程序之后，要测试这个程序，
			让这个程序运行起来，需要JRE。所以JDK安装的时候
			内部自带一个JRE。

3、到目前为止，我们接触过的重点术语，总结一下：

	Java体系的技术被划分为三大块：
		JavaSE：标准版
		JavaEE：企业版
		JavaME：微型版

	安装JDK之后：
		JDK：java开发工具箱
		JRE：Java运行环境
		JVM：Java虚拟机

4、对Java的加载与执行的理解（理论比较重要）
	java程序从编写到最终运行经历了哪些过程？？？？

	java程序非常重要的两个阶段：
		编译阶段
		运行阶段
	
	注意：java程序员直接编写的java代码（普通文本）是无法执行被JVM
	识别的。java程序员编写的java代码这种普通文本必须经过一个编译，
	将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。
	java代码这种普通文本变成字节码的过程，被称为：编译。

	java代码这种普通文本被称为：java源代码。（你编写的代码是源代码）
	源代码不能直接执行，需要先进行编译，生成源代码对应的“字节码”
	JVM可以识别的是字节码。

	编译阶段和运行阶段可以在不同的操作系统上完成吗？
		在windows上编译
		编译之后生成了“字节码”
		把“字节码”放到linux上运行
		完全可以，因为Java是跨平台的。
		可以做到一次编写到处运行。
	
	java源代码一旦编译之后，源代码可以删除吗？只留下字节码可以执行吗？
		完全可以执行，因为源代码不参与程序的执行过程。
		参与程序执行过程的是字节码。
		但是最好不要删除源代码。因为有可能执行结果不是你需要的，
		当执行结果不是你需要的时候，你可以重新打开源代码进行修改，
		然后重新编译生成新的字节码，再重新执行。这样会有新的执行效果。
	
	放源代码的文件扩展名必须是：xxx.java
	并且需要注意的是：编译生成的字节码文件扩展名是：xxx.class
	没有为什么，死记硬背吧！！！！

	.java文件就是源文件，这个文件中编写源代码。
	.class文件就是字节码文件，这个文件是编译源代码而得到的。

	另外需要注意的是：
		1个java源文件是可以编译生成多个class文件的。
		最终运行的是class文件。
	
	问题：字节码文件是二进制文件吗？
		字节码文件不是二进制文件。
		如果是二进制的话，就不需要JVM了。
		因为操作系统可以直接执行二进制。
	
	java程序从开发到最终运行经历了什么？

		编译期：（可以在windows上）
			第一步：在硬盘的某个位置（随意），新建一个xxx.java文件
			第二步：使用记事本或者其它文本编辑器例如EditPlus打开xxx.java文件
			第三步：在xxx.java文件中编写“符合java语法规则的”源代码。
			第四步：保存（一定要将xxx.java文件保存一下）
			第五步：使用编译器（javac【JDK安装后自带】）对xxx.java文件进行编译。

			第六步：如果xxx.java文件中编写的源代码是符合语法规则的，编译会通过，
			如果xxx.java文件中编写的源代码违背了语法规则，那么编译器会报错，编译器
			报错之后class文件是不会生成的，只有编译通过了才会生成class字节码文件。
			并且一个java源文件是可以生成多个class文件的。（编译实质上是检查语法）

		运行期（JRE在起作用）：（可以在windows上，也可以在其他的OS上。）
			第七步：如果是在Linux上运行，需要将windows上生成的class文件拷贝过去
			不需要拷贝源代码，真正运行的是字节码。（但是源代码也不要删除，有用）

			第八步：使用JDK自带的一个命令/工具：java（负责运行的命令/工具）执行字节码

			第九步：往下的步骤就全部交给JVM了，就不需要程序员干涉了。
			JVM会将字节码文件装载进去，然后JVM对字节码进行解释（解释器负责将字节码
			解释为1010101010..等的二进制）

			第十步：JVM会将生成的二进制码交给OS操作系统，操作系统会执行二进制码和
			硬件进行交互。
	
	注意：在以上的过程中，需要使用两个非常重要的命令？
		javac 命令，负责编译
		java 命令，负责运行

	小插曲：
		xxx.java源文件经过编译之后生成了A.class、B.class、C.class等文件，
		那么我们称A是一个类、B是一个类、C是一个类。其中A、B、C是类的名字。
		没有为什么，死记硬背，SUN公司的java语法就是这么规定的。
		A/B/C是类的名称。A类、B类、C类。
	
	源文件中编写的代码叫做：源代码。

	以上是一个复杂的过程，那么缩减一下，程序员到底要干啥？
		新建java文件
		打开java文件
		写java源代码
		保存
		javac命令编译
		java命令运行

		编写、编译、运行

5、编写java中的第一个java程序：HelloWorld（你好世界：问世）	
	这个程序不需要大家理解，大家照抄就行，因为目前我也不会讲解这个程序为什么这么写。
	主要是为了搭建java的开发环境，测试java的环境是否能用。

	第一步：安装文本编辑器（EditPlus）

	第二步：安装JDK（先下载JDK）
		安装JDK13，直接下一步就行。

		JDK13安装的时候内置了一个JRE，独立于JDK之外的JRE并没有生成。
		对于java13来说，如果你希望生成一个独立于JDK之外的JRE的话需要执行特殊的命令。
		这里先不讲，后期用到的时候再说。

		注意的是：
			JDK8安装的时候，不仅JDK内置了一个JRE，而且还会在JDK目录之外
			独立的生成一个单独的JRE。（以前低版本的时候，JRE实际上是有2个。）
			一个是JDK内置的，一个是独立于JDK之外的。
		
		JDK的bin目录下有：
			javac.exe 负责编译
			java.exe 负责运行

	第三步：写代码
		写一下第一个程序HelloWorld。
		这个代码在此强调：
			文件名照抄
			文件内容代码严格照抄
			照抄大小写
			照抄任何一个环节
			照抄标点符号
			不要问为什么。
			后面会解释。

			括号：
				[]
				()
				{}
				都要成对写。

	第四步：编译
	第五步：运行