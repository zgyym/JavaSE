day05课堂笔记

1、标识符
	1.1、标识符可以标识什么，什么是标识符，怎么理解这个概念！
	1.2、标识符的命名规则
	1.3、标识符的命名规范
	本小结最终的要求是：随意给出一个单词，判断它是否是合法的标识符。

2、每一天你会编写很多程序，你会遇到很多编译错误，也会遇到很多运行错误，
你是否需要准备一个单独的文件来记录这些信息，以及记录这些信息是怎么导致
的，原因是什么，怎么去解决的，解决办法是啥？？？？
	非常有必要的，要想成为一个调错高手，这个有必要进行一下。

3、关键字

	3.1、什么是关键字？
		在SUN公司开发Java语言的时候，提前定义好了一些具有特殊含义的单词，
		这些单词全部小写，具有特殊含义，不能用作标识符。
	
	3.2、凡是在EditPlus中以蓝色字体形式存在的都是关键字，具有特殊含义。

	3.3、切记：
		java语言中的所有关键字都是全部小写。
		注意：java语言中是严格区分大小写的。public和Public不一样。
		Class和class不一样。static和Static也不一样。
	
	3.4、那么关键字有哪些呢，我们需要背会吗？需要单独去记忆吗？
		关键字：
			public 
			static
			void 
			class
			byte
			short
			int
			long 
			float
			double
			boolean
			char
			true
			false
			if
			while
			for
			private
			protected
			........
		对于这些关键字来说大家不需要单独花费时间去记忆，
		随着后面程序的积累，你会接触到所有的关键字。

4、变量
	4.1、字面量
		字面量就是数据
		数据就是字面量
		是一个东西。

		10 100 123 ：整型
		1.34 3.14 2.0：浮点型
		true false ：布尔型
		'a' '国'：字符型
		"a" "abc"  "国" "中国"：字符串型

		10：整数，是一个数字
		"10"：它不是数字，是一个字符串，或者说，它属于“文字类”的。
		性质完全不同，在计算机中的对应的二进制码也是完全不同的。

	4.2、变量
		变量的理解
			什么是变量？
				变量就是一个存数据盒子。（盒子大小谁来决定啊？数据类型）
				在内存中的最基本的存储单元。
				存数据用的，而且这个数据是可变的，所以叫做变量。

		变量的使用

			变量的三要素？
				数据类型、变量名、值  （值就是数据，就是字面量。）
				int i = 100;
				
			java中的变量必须先声明，再赋值才能访问（必须手动赋值。）
			int k; System.out.println(k); 这样是不行的。

			可以在一行上声明多个变量：
				int a, b, c = 100;
				c变量赋值100，a,b变量只声明了没有赋值。
				int a = 10, b = 20, c = 100;
				可以这样每个都赋值。
			
			声明和赋值可以分开，也可以一起做！！！
				int i;
				i = 100; // 先声明再赋值
				int k = 200; // 声明的同时赋值
			
			在“同一个域”当中，变量名不能重名！！！！！！
			但可以重新赋值!!!!!!
				{
					int i = 100;
					//double i = 2.0; // 重名了编译器会报错，不允许。
					i = 300; // 可以重新赋值。
				}
			
			到底什么叫做同一个域？？？？？
				这个目前不太好解释，大家记住吧：一个大括号代表一个域。
				{A域
					{B域
						{C域
						}
					}
				}
				A域包括B域，B域包括C域。

		变量的分类
			根据位置进行分类：记住就行
				在方法体当中声明的变量叫做局部变量。
					public static void m1(){
						//局部变量，方法执行结束之后内存释放。
						int k = 100;
						int i = 200;
					}
				在方法体外以及类体内声明的变量叫做成员变量。
					public class T{
						public static void x(){
						
						}
						// 成员变量
						int i = 200;
					}

		变量的作用域
			出了大括号就不认识了。别的先别管。
			{
				int i = 100;
				{
					在这里可以访问i
				}
			}

			{
				在这里是无法访问i变量。
			}

			