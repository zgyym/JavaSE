day18课堂笔记

1、多态在开发中有什么作用？
	非常重要：五颗星。。。。（多态你会天天用，到处用！！！！）

	多态在开发中的作用是：
		降低程序的耦合度，提高程序的扩展力。

		public class Master{
			public void feed(Dog d){}
			public void feed(Cat c){}
		}
		以上的代码中表示：Master和Dog以及Cat的关系很紧密（耦合度高）。导致扩展力很差。

		public class Master{
			public void feed(Pet pet){
				pet.eat();
			}
		}
		以上的代表中表示：Master和Dog以及Cat的关系就脱离了，Master关注的是Pet类。
		这样Master和Dog以及Cat的耦合度就降低了，提高了软件的扩展性。
	
	面向对象的三大特征：
		封装、继承、多态

		真的是一环扣一环。

		有了封装，有了这种整体的概念之后。
		对象和对象之间产生了继承。
		有了继承之后，才有了方法的覆盖和多态。
	
	这里提到了一个软件开发原则：
		七大原则最基本的原则：OCP（对扩展开放，对修改关闭）
		目的是：降低程序耦合度，提高程序扩展力。
		面向抽象编程，不建议面向具体编程。

2、解释之前遗留的问题

	私有方法无法覆盖。

	方法覆盖只是针对于“实例方法”，“静态方法覆盖”没有意义。（这是因为方法覆盖通常和多态联合起来）

	总结两句话：
		私有不能覆盖。
		静态不谈覆盖。

	在方法覆盖中，关于方法的返回值类型。
		什么条件满足之后，会构成方法的覆盖呢？
			1、发生具有继承关系的两个类之间。
			2、父类中的方法和子类重写之后的方法：
				具有相同的方法名、相同的形式参数列表、相同的返回值类型。
		
		学习了多态机制之后：
			“相同的返回值类型”可以修改一下吗？
				对于返回值类型是基本数据类型来说，必须一致。
				对于返回值类型是引用数据类型来说，重写之后返回值类型可以变的更小（但意义不大，实际开发中没人这样写。）。

3、super关键字

	super能出现在实例方法和构造方法中。

	super的语法是：“super.”、“super()”

	super不能使用在静态方法中。

	super. 大部分情况下是可以省略的。

	super.什么时候不能省略呢？
		父类和子类中有同名属性，或者说有同样的方法，
		想在子类中访问父类的，super. 不能省略。

	super() 只能出现在构造方法第一行，通过当前的构造方法去调用“父类”中
	的构造方法，目的是：创建子类对象的时候，先初始化父类型特征。

	super的使用：
		super.属性名				【访问父类的属性】
		super.方法名(实参)		【访问父类的方法】
		super(实参)					【调用父类的构造方法】